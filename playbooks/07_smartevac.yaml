---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: 07 Check all compute nodes are running before VM creation
  hosts: hypervisor
  remote_user: zuul
  become: true
  gather_facts: false
  tasks:
    - name: 07 List all VMs
      community.libvirt.virt:
        command: list_vms
      register: vms_all

    - name: 07 Filter all VMs containing "compute" in the name
      ansible.builtin.set_fact:
        vms: "{{ vms_all.list_vms | select('search', 'compute') | list }}"

    - name: 07 List running VMs
      community.libvirt.virt:
        command: list_vms
        state: running
      register: running_vms_all

    - name: 07 Filter running VMs containing "compute" in the name
      ansible.builtin.set_fact:
        running_vms: "{{ running_vms_all.list_vms | select('search', 'compute') | list }}"

    - name: 07 Get list of not running VMs containing "compute" in the name
      ansible.builtin.set_fact:
        not_running_vms: "{{ vms | difference(running_vms) }}"

    - name: 07 Debug not running VMs
      ansible.builtin.debug:
        var: not_running_vms

    - name: 07 Start VMs that are not running
      community.libvirt.virt:
        name: "{{ item }}"
        state: running
      loop: "{{ not_running_vms }}"
      loop_control:
        label: "{{ item }}"

    - name: 07 Update list of not running VMs after start attempt
      community.libvirt.virt:
        command: list_vms
        state: running
      register: updated_running_vms

    - name: 07 Set new list of not running VMs
      ansible.builtin.set_fact:
        not_running_vms: "{{ vms | difference(updated_running_vms.list_vms | select('search', 'compute') | list) }}"

    - name: 07 Fail if there are still VMs not running
      ansible.builtin.fail:
        msg: "The following compute VMs are still not running: {{ not_running_vms }}"
      when: not_running_vms | length > 0

- name: 07 Apply InstanceHA Configuration and Verify
  hosts: controller-0
  gather_facts: false

  vars:
    ansible_ssh_private_key_file: /home/zuul/.ssh/cifmw_reproducer_key
    kubeadmin_user: kubeadmin
    api_url: https://api.ocp.openstack.lab:6443
    name: "07-test-smart-evacuation"

  tasks:
    - name: 07 Create results file (failure)
      ansible.builtin.template:
        src: templates/iha-tests-results.xml.j2
        dest: /home/zuul/iha-tests-results/{{ name }}.xml
      vars:
        success: false

    - name: 07 Retrieve kubeadmin password using cat command
      ansible.builtin.command: cat /home/zuul/.kube/kubeadmin-password
      register: kubeadmin_password_command
      changed_when: false

    - name: 07 Set kubeadmin_password variable
      ansible.builtin.set_fact:
        kubeadmin_password: "{{ kubeadmin_password_command.stdout }}"

    - name: 07 Delete instanceha-0 if it exists
      kubernetes.core.k8s:
        state: absent
        namespace: openstack
        api_version: instanceha.openstack.org/v1beta1
        username: "{{ kubeadmin_user }}"
        password: "{{ kubeadmin_password }}"
        kind: InstanceHa
        name: instanceha-0
        verify_ssl: false

    - name: 07 Apply iha.yaml to create/update InstanceHA
      kubernetes.core.k8s:
        state: present
        namespace: openstack
        username: "{{ kubeadmin_user }}"
        password: "{{ kubeadmin_password }}"
        src: /home/zuul/iha.yaml
        verify_ssl: false

- name: 07 Generate detailed compute node information on the controller
  hosts: controller-0
  gather_facts: false

  tasks:
    - name: 07 Fetch compute service (hypervisor) info from OpenStack
      openstack.cloud.compute_service_info:
        cloud: default
      register: hypervisor_list

    - name: 07 Reset compute_details variable
      ansible.builtin.set_fact:
        compute_details: []

    - name: 07 Extract detailed information for nova-compute hypervisors
      ansible.builtin.set_fact:
        compute_details: "{{ compute_details | default([]) + [{'hostname': item.host, 'readable_hostname': (item.host | regex_replace('compute-[^.-]+-(\\d+).*', 'compute-\\\
          1')), 'state': item.state, 'status': item.status}] }}"
      loop: "{{ hypervisor_list.compute_services | selectattr('binary', 'equalto', 'nova-compute') }}"

    - name: 07 Sort compute details by hostname
      ansible.builtin.set_fact:
        compute_details: "{{ compute_details | sort(attribute='hostname') }}"

    - name: 07 Save compute details to JSON file on controller
      ansible.builtin.copy:
        content: "{{ compute_details | to_json }}"
        dest: /tmp/compute_details.json

    - name: 07 Transfer JSON file from controller to controller-0
      ansible.builtin.fetch:
        src: /tmp/compute_details.json
        dest: /tmp/compute_details.json
        flat: true

- name: 07 Delete all existing instances
  hosts: controller-0
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

  tasks:
    - name: 07 Fetch all existing instances
      openstack.cloud.server_info:
        cloud: default
      register: existing_instances

    - name: 07 Delete all existing instances
      openstack.cloud.server:
        cloud: default
        state: absent
        name: "{{ item.name }}"
      async: 600
      poll: 0
      loop: "{{ existing_instances.servers }}"
      when: existing_instances.servers | length > 0
      register: deletion_tasks

    - name: 07 Wait for all deletions to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ deletion_tasks.results }}"
      register: deletion_results
      until: deletion_results.finished
      retries: 20
      delay: 15

- name: 07 Verify if smart evacuation is enabled
  hosts: controller-0
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

    - name: 07 Set dynamic compute node names using parsed compute details
      ansible.builtin.set_fact:
        compute_names: "{{ compute_details | map(attribute='hostname') | list }}"

  tasks:
    - name: Reset iha configmap
      ansible.builtin.template:
        src: templates/iha-cm.yaml.j2
        dest: /home/zuul/iha-cm.yaml
      vars:
        smart_evacuation: "true"

    - name: Apply new config
      ansible.builtin.shell: |
        oc apply -f /home/zuul/iha-cm.yaml
      changed_when: false

    - name: 07 Create initial instance vm on compute-0
      openstack.cloud.server:
        cloud: default
        auth:
          project_name: admin
        state: present
        availability_zone: nova:{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | first }}
        name: c1
        image: cirros-0.6.2-iha-x86_64-disk.img
        timeout: 200
        flavor: iha.nano
        security_groups:
          - ping
        nics:
          - net-name: ihanet

- name: 07 Crash compute-0
  hosts: hypervisor
  remote_user: zuul
  become: true
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

  tasks:
    - name: 07 Format compute-0 VM name for libvirt
      ansible.builtin.set_fact:
        compute_zero_vm_name: cifmw-{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | map('regex_replace',
          '\.ctlplane\.example\.com$', '') | first }}

    - name: 07 Verify the formatted compute-0 VM name for libvirt
      ansible.builtin.debug:
        msg: The formatted VM name for compute-0 on libvirt is {{ compute_zero_vm_name }}

    - name: 07 Destroy the compute-0 VM on libvirt
      community.libvirt.virt:
        name: "{{ compute_zero_vm_name }}"
        state: destroyed
      when: compute_zero_vm_name is defined

- name: 07 Wait for compute-0 to transition to 'down' on OpenStack controller and VM c1 correctly evacuated to other hypervisors
  hosts: controller-0
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

    - name: 07 Set compute_zero_hostname fact for compute-0
      ansible.builtin.set_fact:
        compute_zero_hostname: "{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | first }}"

    - name: 07 Retrieve VMs that were running on compute-0 before shutdown
      openstack.cloud.server_info:
        cloud: default
      register: all_vm_info

    - name: 07 Set fact for VMs with name c1 initially on compute-0
      ansible.builtin.set_fact:
        compute_zero_vms: "{{ all_vm_info.servers | selectattr('hypervisor_hostname', 'equalto', compute_zero_hostname) | selectattr('name', 'equalto', 'c1') | map(attribute='name')
          | list }}"

  tasks:
    - name: 07 Wait for compute-0 to transition to 'down' on OpenStack controller
      openstack.cloud.compute_service_info:
        cloud: default
      register: hypervisor_list
      until: (hypervisor_list.compute_services | selectattr('host', 'equalto', compute_zero_hostname) | map(attribute='state') | first) == 'down'
      retries: 12
      delay: 10

    - name: 07 Fetch and check VM status on each VM until ACTIVE
      openstack.cloud.server_info:
        cloud: default
        name: "{{ vm_name }}"
      register: vm_status_info
      until: vm_status_info.servers[0].status == "ACTIVE"
      retries: 12
      delay: 10
      loop: "{{ compute_zero_vms }}"
      loop_control:
        loop_var: vm_name

    - name: 07 Wait until all VMs have been evacuated to other hypervisors
      openstack.cloud.server_info:
        cloud: default
        name: "{{ vm_name }}"
      register: vm_status_info
      until: vm_status_info.servers is defined and vm_status_info.servers[0].hypervisor_hostname != compute_zero_hostname
      retries: 12
      delay: 10
      loop: "{{ compute_zero_vms }}"
      loop_control:
        loop_var: vm_name

    - name: 07 List pods in the "openstack" namespace
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: openstack
      register: pod_list

    - name: 07 Filter for a pod containing "instanceha" in its name
      ansible.builtin.set_fact:
        instanceha_pod_name: "{{ pod_list.resources | map(attribute='metadata.name') | select('search', 'instanceha') | list | first | default('', true) }}"

    - name: 07 Check if a matching pod was found
      ansible.builtin.fail:
        msg: No pod found with 'instanceha' in its name.
      when: instanceha_pod_name == ""

    - name: 07 Retrieve logs from the filtered "instanceha" pod
      kubernetes.core.k8s_log:
        namespace: openstack
        name: "{{ instanceha_pod_name }}"
        tail_lines: 100
        all_containers: true
      register: instanceha_logs
      retries: 12
      delay: 10
      until: "'evacuated successfully' in instanceha_logs.log"

    - name: 07 Wait for compute-0 to transition to 'up' on OpenStack controller
      openstack.cloud.compute_service_info:
        cloud: default
      register: hypervisor_list
      until: (hypervisor_list.compute_services | selectattr('host', 'equalto', compute_zero_hostname) | map(attribute='state') | first) == 'up'
      retries: 12
      delay: 10

    - name: 07 Remove vm
      openstack.cloud.server:
        cloud: default
        auth:
          project_name: admin
        state: absent
        name: c1

- name: 07 Create fill flavor and generate instances on other computes available
  hosts: controller-0
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

  tasks:
    - name: 07 Create fill flavor
      openstack.cloud.compute_flavor:
        cloud: default
        state: present
        name: fill
        ram: 13096
        vcpus: 8
        disk: 1
        extra_specs:
          hw_rng:allowed: "True"

    - name: 07 Fill up each hypervisor with VMs except compute-0 using compute details
      openstack.cloud.server:
        cloud: default
        auth:
          project_name: admin
        state: present
        availability_zone: nova:{{ item_vm.0.hostname }}
        name: "{{ item_vm.0.readable_hostname }}-vmfill{{ item_vm.1 | string }}"
        image: cirros-0.6.2-iha-x86_64-disk.img
        timeout: 200
        flavor: fill
        auto_ip: false
        security_groups:
          - ping
        nics:
          - net-name: ihanet
        wait: true
      loop: "{{ compute_details | selectattr('readable_hostname', 'ne', 'compute-0') | product(range(1, (num_vms | default(1) | int) + 1) | list) }}"
      loop_control:
        loop_var: item_vm
      async: 6000
      poll: 0
      register: vm_creation_tasks

    - name: 07 Wait for all VMs to be created and active
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: vm_creation_result
      until: vm_creation_result.finished
      retries: 10
      delay: 10
      loop: "{{ vm_creation_tasks.results }}"
      loop_control:
        pause: 1

    - name: 07 Create instance vm0 on compute-0
      openstack.cloud.server:
        cloud: default
        auth:
          project_name: admin
        state: present
        availability_zone: nova:{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | first }}
        name: vm0
        image: cirros-0.6.2-iha-x86_64-disk.img
        timeout: 200
        flavor: fill
        security_groups:
          - ping
        nics:
          - net-name: ihanet

- name: 07 Crash compute-0
  hosts: hypervisor
  remote_user: zuul
  become: true
  gather_facts: false

  pre_tasks:
    - name: Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

  tasks:
    - name: 07 Format compute-0 VM name for libvirt
      ansible.builtin.set_fact:
        compute_zero_vm_name: cifmw-{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | map('regex_replace',
          '\.ctlplane\.example\.com$', '') | first }}

    - name: 07 Verify the formatted compute-0 VM name for libvirt
      ansible.builtin.debug:
        msg: The formatted VM name for compute-0 on libvirt is {{ compute_zero_vm_name }}

    - name: 07 Destroy the compute-0 VM on libvirt
      community.libvirt.virt:
        name: "{{ compute_zero_vm_name }}"
        state: destroyed
      when: compute_zero_vm_name is defined

- name: 07 Check vm0 evacuation
  hosts: controller-0
  gather_facts: false
  vars:
    name: "07-test-smart-evacuation"
  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

    - name: 07 Set compute_zero_hostname fact for compute-0
      ansible.builtin.set_fact:
        compute_zero_hostname: "{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | first }}"

    - name: 07 Retrieve VMs that were running on compute-0 before shutdown
      openstack.cloud.server_info:
        cloud: default
      register: all_vm_info

    - name: 07 Set fact for VMs initially on compute-0
      ansible.builtin.set_fact:
        compute_zero_vms: "{{ all_vm_info.servers | selectattr('hypervisor_hostname', 'equalto', compute_zero_hostname) | map(attribute='name') | list }}"

    - name: 07 List pods in the "openstack" namespace
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: openstack
      register: pod_list

    - name: 07 Filter for a pod containing "instanceha" in its name
      ansible.builtin.set_fact:
        instanceha_pod_name: "{{ pod_list.resources | map(attribute='metadata.name') | select('search', 'instanceha') | list | first | default('', true) }}"

  tasks:
    - name: 07 Wait for compute-0 to transition to 'down' on OpenStack controller
      openstack.cloud.compute_service_info:
        cloud: default
      register: hypervisor_list
      until: (hypervisor_list.compute_services | selectattr('host', 'equalto', compute_zero_hostname) | map(attribute='state') | first) == 'down'
      retries: 12
      delay: 10

    - name: 07 Fetch and check VM status for vm0 until it goes in ERROR state
      openstack.cloud.server_info:
        cloud: default
        name: vm0
      register: vm_status_info
      until:
        - vm_status_info.servers[0].status == "ERROR"
      retries: 12
      delay: 10

    - name: 07 Fail if vm0 is not running on compute-0
      ansible.builtin.fail:
        msg: VM vm0 is not running on compute-0 or has been evacuated.
      when:
        - vm_status_info.servers[0].status != "ACTIVE"
        - vm_status_info.servers[0].hypervisor_hostname != compute_zero_hostname

    - name: 07 Retrieve logs from the filtered "instanceha" pod
      kubernetes.core.k8s_log:
        namespace: openstack
        name: "{{ instanceha_pod_name }}"
        tail_lines: 100
        all_containers: true
      register: instanceha_logs
      retries: 10
      delay: 5
      until: "'Failed evacuating' in instanceha_logs.log"

    - name: 07 save logs
      ansible.builtin.shell: oc logs deploy/instanceha-0 > /home/zuul/iha-tests-results/{{ name }}.log
      changed_when: false

    - name: 07 Create results file (success)
      ansible.builtin.template:
        src: templates/iha-tests-results.xml.j2
        dest: /home/zuul/iha-tests-results/{{ name }}.xml
      vars:
        success: true

- name: 07 Disable smart evacuation
  hosts: controller-0
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

    - name: 07 Set dynamic compute node names using parsed compute details
      ansible.builtin.set_fact:
        compute_names: "{{ compute_details | map(attribute='hostname') | list }}"

  tasks:
    - name: Reset iha configmap
      ansible.builtin.template:
        src: templates/iha-cm.yaml.j2
        dest: /home/zuul/iha-cm.yaml

    - name: Apply new config
      ansible.builtin.shell: |
        oc apply -f /home/zuul/iha-cm.yaml
      changed_when: false

- name: 07 Cleanup VMs
  hosts: controller-0
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

    - name: 07 Retrieve all VM names
      openstack.cloud.server_info:
        cloud: default
      register: all_vms_info

    - name: 07 Filter VMs with names matching 'vm1' or containing 'vmfill'
      ansible.builtin.set_fact:
        vms_to_remove: "{{ all_vms_info.servers | selectattr('name', 'search', '^vm0$|vmfill') | map(attribute='name') | list }}"

  tasks:
    - name: 07 Remove all created VMs
      openstack.cloud.server:
        cloud: default
        state: absent
        name: "{{ item }}"
      loop: "{{ vms_to_remove }}"
      async: 600
      poll: 0
      ignore_errors: true
      register: deletion_tasks

    - name: 07 Wait for all VM deletions to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ deletion_tasks.results }}"
      register: deletion_results
      until: deletion_results.finished
      retries: 20
      delay: 15

- name: 07 Restart compute-0
  hosts: hypervisor
  remote_user: zuul
  become: true
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

  tasks:
    - name: 07 Format compute-0 VM name for libvirt
      ansible.builtin.set_fact:
        compute_zero_vm_name: cifmw-{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | map('regex_replace',
          '\.ctlplane\.example\.com$', '') | first }}

    - name: 07 Verify the formatted compute-0 VM name for libvirt
      ansible.builtin.debug:
        msg: The formatted VM name for compute-0 on libvirt is {{ compute_zero_vm_name }}

    - name: 07 Restart the compute-0 VM on libvirt
      community.libvirt.virt:
        name: "{{ compute_zero_vm_name }}"
        state: running
      when: compute_zero_vm_name is defined

- name: 07 Enable compute-0 nova service on OpenStack controller
  hosts: controller-0
  gather_facts: false

  pre_tasks:
    - name: 07 Load and set compute details from JSON file as a fact
      ansible.builtin.set_fact:
        compute_details: "{{ (lookup('file', '/tmp/compute_details.json') | from_json) }}"

    - name: 07 Set compute_zero_hostname fact for compute-0
      ansible.builtin.set_fact:
        compute_zero_hostname: "{{ compute_details | selectattr('readable_hostname', 'equalto', 'compute-0') | map(attribute='hostname') | first }}"

  tasks:
    - name: 07 Enable compute-0 nova compute service on OpenStack controller
      ansible.builtin.shell: |
        openstack --os-cloud default compute service set --enable --up {{ compute_zero_hostname }} nova-compute
      register: enable_service_output
      changed_when: false

    - name: 07 Wait for compute-0 to transition to 'up' on OpenStack controller
      openstack.cloud.compute_service_info:
        cloud: default
      register: hypervisor_list
      until: (hypervisor_list.compute_services | selectattr('host', 'equalto', compute_zero_hostname) | map(attribute='state') | first) == 'up'
      retries: 12
      delay: 10
